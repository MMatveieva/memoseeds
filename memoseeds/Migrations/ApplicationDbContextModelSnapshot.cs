// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using memoseeds.Database;

namespace memoseeds.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("memoseeds.Models.Entities.AquiredCourses", b =>
                {
                    b.Property<int>("AquiredCoursesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourseId")
                        .HasColumnName("course");

                    b.Property<bool>("IsLocal")
                        .HasColumnName("is_local");

                    b.Property<int>("UserId")
                        .HasColumnName("user");

                    b.HasKey("AquiredCoursesId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("aquired_courses");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int?>("SubjectId")
                        .HasColumnName("subject");

                    b.HasKey("CategoryId");

                    b.HasIndex("SubjectId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Collector", b =>
                {
                    b.Property<int>("CollectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("TermId")
                        .HasColumnName("term");

                    b.Property<int?>("TypeId");

                    b.Property<int>("UserId")
                        .HasColumnName("user");

                    b.HasKey("CollectorId");

                    b.HasIndex("TermId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("collector");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Completion", b =>
                {
                    b.Property<int>("CompletionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CollectorId")
                        .HasColumnName("collector");

                    b.Property<int>("NumAttempt")
                        .HasColumnName("attempt");

                    b.Property<int>("NumSuccess")
                        .HasColumnName("success");

                    b.Property<int>("TypeId")
                        .HasColumnName("type");

                    b.HasKey("CompletionId");

                    b.HasIndex("CollectorId");

                    b.HasIndex("TypeId");

                    b.ToTable("completions");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("category");

                    b.Property<bool>("IsDefault")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsFree")
                        .HasColumnName("is_free");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnName("user");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AuthorId")
                        .HasColumnName("author");

                    b.Property<int?>("CourseId")
                        .HasColumnName("course");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("ModuleId");

                    b.HasIndex("CourseId");

                    b.ToTable("modules");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("SubjectId");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Term", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Definition")
                        .HasColumnName("definition");

                    b.Property<int?>("ModuleId")
                        .HasColumnName("module");

                    b.Property<string>("Name")
                        .HasColumnName("type");

                    b.HasKey("TermId");

                    b.HasIndex("ModuleId");

                    b.ToTable("terms");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("Name")
                        .HasColumnName("type");

                    b.HasKey("TypeId");

                    b.ToTable("types");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email");

                    b.Property<decimal>("Money")
                        .HasColumnName("money");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.VisibleCourses", b =>
                {
                    b.Property<int>("VisibleCoursesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("CanEdit")
                        .HasColumnName("can_edit");

                    b.Property<int>("CourseId")
                        .HasColumnName("course");

                    b.Property<int>("UserId")
                        .HasColumnName("user");

                    b.HasKey("VisibleCoursesId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("visible_courses");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.AquiredCourses", b =>
                {
                    b.HasOne("memoseeds.Models.Entities.Course", "Course")
                        .WithMany("Aquireds")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("memoseeds.Models.Entities.User", "User")
                        .WithMany("Aquireds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Category", b =>
                {
                    b.HasOne("memoseeds.Models.Entities.Subject", "Subject")
                        .WithMany("Categories")
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Collector", b =>
                {
                    b.HasOne("memoseeds.Models.Entities.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("memoseeds.Models.Entities.Type")
                        .WithMany("Collectors")
                        .HasForeignKey("TypeId");

                    b.HasOne("memoseeds.Models.Entities.User", "User")
                        .WithMany("Collectors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Completion", b =>
                {
                    b.HasOne("memoseeds.Models.Entities.Collector", "Collector")
                        .WithMany("Completions")
                        .HasForeignKey("CollectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("memoseeds.Models.Entities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Course", b =>
                {
                    b.HasOne("memoseeds.Models.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Module", b =>
                {
                    b.HasOne("memoseeds.Models.Entities.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Term", b =>
                {
                    b.HasOne("memoseeds.Models.Entities.Module", "Module")
                        .WithMany("Terms")
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.VisibleCourses", b =>
                {
                    b.HasOne("memoseeds.Models.Entities.Course", "Course")
                        .WithMany("Visibles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("memoseeds.Models.Entities.User", "User")
                        .WithMany("Visibles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
