// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using memoseeds.Database;

namespace memoseeds.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190211152308_postgresqlMigration")]
    partial class postgresqlMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("memoseeds.Models.Entities.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name");

                    b.Property<int>("subjectId");

                    b.HasKey("categoryId");

                    b.HasIndex("subjectId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Subject", b =>
                {
                    b.Property<int>("subjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name");

                    b.HasKey("subjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("memoseeds.Models.Entities.Category", b =>
                {
                    b.HasOne("memoseeds.Models.Entities.Subject")
                        .WithMany("categories")
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
